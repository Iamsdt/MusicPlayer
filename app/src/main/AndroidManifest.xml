<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    package="com.example.musicplayer">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.WAKE_LOCK" />
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />

    <application
        android:name=".MyApp"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:requestLegacyExternalStorage="true"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/AppTheme"
        tools:ignore="GoogleAppIndexingWarning,UnusedAttribute">
        <activity
            android:name=".ui.play.PlayActivity"
            android:label="@string/title_activity_play"
            android:launchMode="singleTask"
            android:theme="@style/AppTheme.NoActionBar" />
        <activity
            android:name=".ui.playlist.PlaylistActivity"
            android:label="@string/title_activity_playlist"
            android:parentActivityName=".ui.main.MainUIActivity"
            android:theme="@style/AppTheme.NoActionBar" />

        <activity
            android:name=".ui.playlist.PlayListDetails"
            android:label="@string/title_activity_playlist"
            android:theme="@style/AppTheme.NoActionBar" />

        <receiver android:name=".widget.PlayListWidget">
            <intent-filter>
                <action android:name="android.appwidget.action.APPWIDGET_UPDATE" />
            </intent-filter>

            <meta-data
                android:name="android.appwidget.provider"
                android:resource="@xml/play_list_widget_info" />
        </receiver>

        <activity android:name=".widget.PlayListWidgetConfigureActivity">
            <intent-filter>
                <action android:name="android.appwidget.action.APPWIDGET_CONFIGURE" />
            </intent-filter>
        </activity>
        <activity
            android:name=".ui.artist.ArtistListActivity"
            android:label="@string/title_activity_artist_list"
            android:theme="@style/AppTheme.NoActionBar" />
        <activity
            android:name=".ui.albums.AlbumActivity"
            android:label="@string/title_activity_albums_list"
            android:theme="@style/AppTheme.NoActionBar" />
        <activity
            android:name=".ui.songs.SongActivity"
            android:label="@string/app_name"
            android:theme="@style/AppTheme.NoActionBar" />
        <activity
            android:name=".ui.main.MainUIActivity"
            android:label="@string/app_name"
            android:theme="@style/AppTheme.NoActionBar" />
        <activity
            android:name=".MainActivity"
            android:label="@string/app_name"
            android:theme="@style/AppTheme.NoActionBar">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <service
            android:name=".service.MusicService"
            android:enabled="true"
            android:exported="true"
            tools:ignore="ExportedService">

            <intent-filter>
                <action android:name="android.media.browse.MediaBrowserService" />
            </intent-filter>
        </service>

        <!--
             MediaSession, prior to API 21, uses a broadcast receiver to communicate with a
             media session. It does not have to be this broadcast receiver, but it must
             handle the action "android.intent.action.MEDIA_BUTTON".

             Additionally, this is used to resume the service from an inactive state upon
             receiving a media button event (such as "play").
        -->
        <receiver android:name="androidx.media.session.MediaButtonReceiver">
            <intent-filter>
                <action android:name="android.intent.action.MEDIA_BUTTON" />
            </intent-filter>
        </receiver>

    </application>

</manifest>